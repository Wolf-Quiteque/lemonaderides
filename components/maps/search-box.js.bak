'use client';

import { useState, useEffect } from 'react';

export default function SearchBox({ onSelect, placeholder }) {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // OpenCage Geocoding API implementation
  const fetchOpenCageSuggestions = async (searchQuery) => {
    setLoading(true);
    setError(null);
    
    try {
      const encodedQuery = encodeURIComponent(searchQuery.trim());
      
      // OpenCage Geocoding API URL
      const opencageUrl = `https://api.opencagedata.com/geocode/v1/json` +
        `?q=${encodedQuery}` +
        `&key=${process.env.NEXT_PUBLIC_OPENCAGE_API_KEY}` +
        `&limit=8` +                    // Max 8 results
        `&countrycode=ao` +             // Angola only
        `&language=pt` +                // Portuguese results
        `&no_annotations=1` +           // Faster response
        `&abbrv=1` +                   // Abbreviated responses
        `&pretty=0` +                  // Minified JSON
        `&min_confidence=1`;           // Only confident results
      
      console.log('OpenCage URL:', opencageUrl); // Debug log
      
      const response = await fetch(opencageUrl);
      
      if (!response.ok) {
        throw new Error(`OpenCage API error: ${response.status}`);
      }
      
      const data = await response.json();
      
      console.log('OpenCage response:', data); // Debug log
      
      if (data.status?.code !== 200) {
        throw new Error(`OpenCage error: ${data.status?.message || 'Unknown error'}`);
      }
      
      if (!data.results || data.results.length === 0) {
        // If no results from OpenCage, fall back to manual Angola locations
        const manualSuggestions = getManualSuggestions(searchQuery);
        setSuggestions(manualSuggestions);
        return;
      }
      
      // Process OpenCage results
      const processedSuggestions = data.results.map((result, index) => {
        // Extract meaningful place name components
        const components = result.components || {};
        const displayName = getDisplayName(components, result.formatted);
        const shortName = getShortName(components);
        
        return {
          id: `opencage-${result.annotations?.geohash || index}`,
          place_name: result.formatted,
          display_name: displayName,
          short_name: shortName,
          center: [result.geometry.lng, result.geometry.lat],
          confidence: result.confidence,
          properties: {
            source: 'opencage',
            components: components,
            confidence: result.confidence,
            type: result._type
          },
          place_type: getPlaceType(components, result._type)
        };
      });
      
      setSuggestions(processedSuggestions);
      
      // Log usage for debugging
      console.log(`OpenCage request used. Remaining today: ${data.rate?.remaining || 'unknown'}`);
      
    } catch (error) {
      console.error('OpenCage geocoding failed:', error);
      setError(error.message);
      
      // Fallback to manual suggestions on error
      const manualSuggestions = getManualSuggestions(searchQuery);
      setSuggestions(manualSuggestions);
    } finally {
      setLoading(false);
    }
  };

  // Helper function to create meaningful display names
  const getDisplayName = (components, formatted) => {
    const parts = [];
    
    if (components.neighbourhood) parts.push(components.neighbourhood);
    else if (components.suburb) parts.push(components.suburb);
    else if (components.village) parts.push(components.village);
    else if (components.town) parts.push(components.town);
    
    if (components.city && !parts.includes(components.city)) {
      parts.push(components.city);
    }
    
    if (components.state && !parts.includes(components.state)) {
      parts.push(components.state);
    }
    
    return parts.length > 0 ? parts.join(', ') + ', Angola' : formatted;
  };

  // Helper function to get short name for display
  const getShortName = (components) => {
    return components.neighbourhood || 
           components.suburb || 
           components.village || 
           components.town || 
           components.city || 
           'Location';
  };

  // Helper function to determine place type
  const getPlaceType = (components, type) => {
    if (components.neighbourhood || components.suburb) return ['neighbourhood'];
    if (components.village) return ['village'];
    if (components.town) return ['town'];
    if (components.city) return ['city'];
    return ['place'];
  };

  // Fallback manual suggestions for common Angola locations
  const getManualSuggestions = (searchQuery) => {
    const commonAngoleanLocations = [
      // Luanda Districts & Neighborhoods
      { name: 'Zango I', coords: [13.1589, -8.9736], type: 'neighbourhood', city: 'Luanda' },
      { name: 'Zango II', coords: [13.1420, -8.9680], type: 'neighbourhood', city: 'Luanda' },
      { name: 'Zango III', coords: [13.1250, -8.9624], type: 'neighbourhood', city: 'Luanda' },
      { name: 'Zango IV', coords: [13.1100, -8.9580], type: 'neighbourhood', city: 'Luanda' },
      { name: 'Kilamba Kiaxi', coords: [13.1500, -8.9500], type: 'municipality', city: 'Luanda' },
      { name: 'Viana', coords: [13.3736, -8.8886], type: 'municipality', city: 'Luanda' },
      { name: 'Cacuaco', coords: [13.3681, -8.7833], type: 'municipality', city: 'Luanda' },
      { name: 'Belas', coords: [13.1667, -8.9500], type: 'municipality', city: 'Luanda' },
      { name: 'Talatona', coords: [13.1833, -8.9167], type: 'neighbourhood', city: 'Luanda' },
      { name: 'Benfica', coords: [13.2667, -8.8167], type: 'district', city: 'Luanda' },
      { name: 'Maianga', coords: [13.2333, -8.8167], type: 'district', city: 'Luanda' },
      { name: 'Rangel', coords: [13.2500, -8.8000], type: 'district', city: 'Luanda' },
      { name: 'Sambizanga', coords: [13.2167, -8.8000], type: 'district', city: 'Luanda' },
      { name: 'Ingombota', coords: [13.2333, -8.8333], type: 'district', city: 'Luanda' },
      { name: 'Samba', coords: [13.2000, -8.7833], type: 'district', city: 'Luanda' },
      { name: 'Cazenga', coords: [13.2500, -8.9167], type: 'district', city: 'Luanda' },
      
      // Major Shopping/Business Areas
      { name: 'Belas Shopping', coords: [13.1650, -8.9480], type: 'shopping', city: 'Luanda' },
      { name: 'Kilamba Kiaxi Shopping', coords: [13.1520, -8.9520], type: 'shopping', city: 'Luanda' },
      { name: 'Fortaleza de S√£o Miguel', coords: [13.2308, -8.8158], type: 'landmark', city: 'Luanda' },
      { name: 'Porto de Luanda', coords: [13.2342, -8.8089], type: 'port', city: 'Luanda' },
      
      // Other Major Cities
      { name: 'Benguela', coords: [13.4055, -12.5763], type: 'city', city: 'Benguela' },
      { name: 'Huambo', coords: [15.7353, -12.7756], type: 'city', city: 'Huambo' },
      { name: 'Lobito', coords: [13.5433, -12.3616], type: 'city', city: 'Lobito' },
      { name: 'Cabinda', coords: [12.2027, -5.5591], type: 'city', city: 'Cabinda' }
    ];
    
    const queryLower = searchQuery.toLowerCase();
    const matchingLocations = commonAngoleanLocations.filter(location => 
      location.name.toLowerCase().includes(queryLower) ||
      queryLower.includes(location.name.toLowerCase())
    );
    
    return matchingLocations.map(location => ({
      id: `manual-${location.name}`,
      place_name: `${location.name}, ${location.city}, Angola`,
      display_name: `${location.name}, ${location.city}, Angola`,
      short_name: location.name,
      center: location.coords,
      confidence: 8, // High confidence for manual entries
      properties: {
        source: 'manual',
        type: location.type,
        manual: true
      },
      place_type: [location.type]
    }));
  };

  useEffect(() => {
    if (query.length > 2) {
      const timeoutId = setTimeout(() => {
        fetchOpenCageSuggestions(query);
      }, 300); // Debounce to avoid too many API calls
      
      return () => clearTimeout(timeoutId);
    } else {
      setSuggestions([]);
      setError(null);
    }
  }, [query]);

  const getTypeIcon = (placeType, source) => {
    if (source === 'manual') return 'üìç';
    
    const type = Array.isArray(placeType) ? placeType[0] : placeType;
    const icons = {
      'neighbourhood': 'üèòÔ∏è',
      'district': 'üèôÔ∏è',
      'municipality': 'üèõÔ∏è',
      'city': 'üåÜ',
      'town': 'üèòÔ∏è',
      'village': 'üè°',
      'shopping': 'üõí',
      'landmark': 'üèõÔ∏è',
      'port': '‚öì'
    };
    return icons[type] || 'üìç';
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 7) return 'text-green-600';
    if (confidence >= 5) return 'text-yellow-600';
    return 'text-orange-600';
  };

  return (
    <div className="relative">
      <input
        type="text"
        required
        className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder={placeholder}
      />
      
      {loading && (
        <div className="absolute right-3 top-3">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
        </div>
      )}
      
      {error && (
        <div className="absolute z-10 w-full bg-red-50 border border-red-200 rounded mt-1 p-3">
          <p className="text-red-600 text-sm">‚ö†Ô∏è {error}</p>
        </div>
      )}
      
      {suggestions.length > 0 && (
        <ul className="absolute z-10 w-full bg-white border rounded mt-1 max-h-64 overflow-y-auto shadow-lg">
          {suggestions.map((suggestion) => (
            <li
              key={suggestion.id}
              className="p-3 cursor-pointer hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors"
              onClick={() => {
                setQuery(suggestion.display_name);
                onSelect({
                  name: suggestion.display_name,
                  coordinates: suggestion.center,
                  source: suggestion.properties.source,
                  confidence: suggestion.confidence
                });
                setSuggestions([]);
                setError(null);
              }}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="font-medium text-gray-900 flex items-center">
                    <span className="mr-2">
                      {getTypeIcon(suggestion.place_type, suggestion.properties.source)}
                    </span>
                    {suggestion.short_name}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">
                    {suggestion.display_name}
                  </div>
                  {suggestion.properties.source === 'opencage' && (
                    <div className="text-xs text-gray-500 mt-1 flex items-center">
                      <span className={`mr-2 ${getConfidenceColor(suggestion.confidence)}`}>
                        ‚≠ê {suggestion.confidence}/10
                      </span>
                      via OpenCage
                    </div>
                  )}
                  {suggestion.properties.manual && (
                    <div className="text-xs text-blue-600 mt-1">
                      üìç Local database
                    </div>
                  )}
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
      
      {query.length > 2 && suggestions.length === 0 && !loading && !error && (
        <div className="absolute z-10 w-full bg-white border rounded mt-1 p-3 text-gray-500 text-sm">
          No results found for "{query}". Try searching for:
          <div className="mt-2 text-xs">
            ‚Ä¢ Neighborhoods: Zango, Talatona, Benfica<br/>
            ‚Ä¢ Districts: Maianga, Rangel, Sambizanga<br/>
            ‚Ä¢ Municipalities: Viana, Cacuaco, Belas
          </div>
        </div>
      )}
    </div>
  );
}
